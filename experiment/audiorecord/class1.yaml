defaults:
  - override /recorder: respeaker
  - override /hardware1: respeaker_hardware
  - override /experiment_meta: custom_experiment_meta

recorder:
  output_dir: "custom_recordings"
  duration: 10
  sample_rate: 16000
  channels: 6
  gain: 1.2

hardware1:
  type: "ReSpeaker"
  device_id: 1
  channels: 6
  gain: 1.5
  sample_rate: 16000

experiment_meta:
  experiment_id: "exp10"
  experiment_type: "class1"
  run_date: "2025-01-01"
  sample_count: 5
  doa_range:
    min: 10
    max: 80
  elevation_range:
    min: -45
    max: 45
  frequency_range:
    min: 100
    max: 8000
  amplitude_range:
    min: 0.1
    max: 0.9
  categories:
    - "horn"
    - "siren"
  selected_categories:
    - "horn"
  doa: 45
  elevation: 10
  frequency: 500
  amplitude: 0.7
  #def save(self, recording, filename):
    """
    Saves each channel's recording with metadata (DOA, frequency, etc.) as part of the filename.
    Creates a new folder inside the recordings directory using the timestamp of the experiment.
    """
    # Generate timestamp for the experiment folder (e.g., 2024-11-26_14-30-00)
    experiment_timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    experiment_folder = os.path.join(self.config.output_dir, experiment_timestamp)

    # Create the experiment folder if it doesn't exist
    os.makedirs(experiment_folder, exist_ok=True)

    # Apply gain to recording
    recording = (recording * self.gain).astype(np.int16)

    # Get the current date and time for unique filenames
    current_time = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

    # Save a file for each channel with metadata in the filename
    for channel in range(self.channels):
        # Generate filename using metadata
        filename = f"{experiment_timestamp}_{self.type}_ch{channel+1}_DOA{self.metadata['doa']}_elev{self.metadata['elevation']}_cat{'category'}_freq{self.metadata['frequency']}_gain{self.gain}_amp{self.metadata['amplitude']}_len{self.config.duration}_{current_time}.wav"
        
        # Construct file path in the experiment folder
        file_path = os.path.join(experiment_folder, filename)

        channel_data = recording[:, channel]
        with wave.open(file_path, "w") as wf:
            wf.setnchannels(1)  # Mono channel
            wf.setsampwidth(2)  # 16-bit PCM
            wf.setframerate(self.config.sample_rate)
            wf.writeframes(channel_data.tobytes())
        
        print(f"Saved channel {channel+1} to {file_path}")
